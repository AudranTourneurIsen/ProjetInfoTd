        -:    0:Source:/home/audran/Code/projet-cir/concepteur_solveur/solveur/src/main.c
        -:    0:Graph:/home/audran/Code/projet-cir/concepteur_solveur/solveur/cmake-build-debug-coverage/CMakeFiles/solveur.dir/src/main.c.gcno
        -:    0:Data:/home/audran/Code/projet-cir/concepteur_solveur/solveur/cmake-build-debug-coverage/CMakeFiles/solveur.dir/src/main.c.gcda
        -:    0:Runs:1
        -:    1:#include "fonctions.h"
        -:    2:#include "TerminalUtils.h"
        -:    3:#include "simulation.h"
        -:    4:
        -:    5:#define WaveAmount 64
        -:    6:Wave Waves[WaveAmount] = {};
        -:    7:
function getOptimalTurretPositions called 0 returned 0% blocks executed 0%
    #####:    8:Cursor *getOptimalTurretPositions(char grid[gridSIZE][gridSIZE], int gold)
        -:    9:{
    #####:   10:    const int turretsTotal = gold / 10;
    #####:   11:    int turretIndex = 0;
    #####:   12:    Cursor *turretPositions = malloc(sizeof(Cursor) * turretsTotal);
    #####:   13:    int count = 0;
    #####:   14:    for (int k = 7; k > 0; k--)
    %%%%%:   14-block  0
    %%%%%:   14-block  1
    %%%%%:   14-block  2
branch  0 never executed
branch  1 never executed
        -:   15:    {
    #####:   16:        for (int i = 0; i < gridSIZE; i++)
    %%%%%:   16-block  0
    %%%%%:   16-block  1
    %%%%%:   16-block  2
branch  0 never executed
branch  1 never executed
        -:   17:        {
    #####:   18:            for (int j = 0; j < gridSIZE; j++)
    %%%%%:   18-block  0
    %%%%%:   18-block  1
    %%%%%:   18-block  2
branch  0 never executed
branch  1 never executed
        -:   19:            {
    #####:   20:                if (grid[i][j] == PATH)
    %%%%%:   20-block  0
branch  0 never executed
branch  1 never executed
        -:   21:                { // Ne pas prendre en compte les cases du chemin
        -:   22:                    //printf(" x = %d | y = %d | count = %d \n", i, j, count);
    #####:   23:                    continue;
    %%%%%:   23-block  0
        -:   24:                }
        -:   25:
    #####:   26:                for (int x = i - 1; x <= i + 1; x++)
    %%%%%:   26-block  0
    %%%%%:   26-block  1
    %%%%%:   26-block  2
branch  0 never executed
branch  1 never executed
        -:   27:                {
    #####:   28:                    for (int y = j - 1; y <= j + 1; y++)
    %%%%%:   28-block  0
    %%%%%:   28-block  1
    %%%%%:   28-block  2
branch  0 never executed
branch  1 never executed
        -:   29:                    {
    #####:   30:                        if (x > gridSIZE - 1)
    %%%%%:   30-block  0
branch  0 never executed
branch  1 never executed
    #####:   31:                            continue;
    %%%%%:   31-block  0
    #####:   32:                        if (x < 0)
    %%%%%:   32-block  0
branch  0 never executed
branch  1 never executed
    #####:   33:                            continue;
    %%%%%:   33-block  0
    #####:   34:                        if (y > gridSIZE - 1)
    %%%%%:   34-block  0
branch  0 never executed
branch  1 never executed
    #####:   35:                            continue;
    %%%%%:   35-block  0
    #####:   36:                        if (y < 0)
    %%%%%:   36-block  0
branch  0 never executed
branch  1 never executed
    #####:   37:                            continue;
    %%%%%:   37-block  0
    #####:   38:                        if (grid[x][y] == PATH)
    %%%%%:   38-block  0
branch  0 never executed
branch  1 never executed
        -:   39:                        {
    #####:   40:                            count++;
    %%%%%:   40-block  0
        -:   41:                        }
        -:   42:                    }
        -:   43:                }
        -:   44:
        -:   45:                //printf(" x = %d | y = %d | count = %d \n", i, j, count);
        -:   46:
    #####:   47:                if (count == k)
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
        -:   48:                {
        -:   49:                    //for (int index = 0; index < )
        -:   50:                    Cursor c;
    #####:   51:                    c.x = i;
    #####:   52:                    c.y = j;
    #####:   53:                    c.reach = k;
    #####:   54:                    grid[c.x][c.y] = TURRET;
        -:   55:
    #####:   56:                    turretPositions[turretIndex] = c;
    #####:   57:                    turretIndex++;
    #####:   58:                    if (turretIndex == turretsTotal)
    %%%%%:   58-block  0
branch  0 never executed
branch  1 never executed
    #####:   59:                        return turretPositions;
    %%%%%:   59-block  0
        -:   60:                }
        -:   61:            }
        -:   62:        }
        -:   63:    }
    #####:   64:    return turretPositions;
    %%%%%:   64-block  0
        -:   65:}
        -:   66:
function displayPositions called 0 returned 0% blocks executed 0%
    #####:   67:void displayPositions(Cursor *cursors, int size)
        -:   68:{
    #####:   69:    for (size_t i = 0; i < size; i++)
    %%%%%:   69-block  0
    %%%%%:   69-block  1
branch  0 never executed
branch  1 never executed
        -:   70:    {
    #####:   71:        Cursor cursor = cursors[i];
    #####:   72:        printf("[%d/%d] -> ", cursor.x, cursor.y);
    %%%%%:   72-block  0
call    0 never executed
        -:   73:    }
    #####:   74:}
        -:   75:
function TurretPositionInOrder called 0 returned 0% blocks executed 0%
    #####:   76:Cursor *TurretPositionInOrder(char grid[gridSIZE][gridSIZE], int gold)
        -:   77:{
    #####:   78:    int turretTotalNumber = gold / 10;
    #####:   79:    int turretIndex = 0;
    #####:   80:    Cursor *turretOrder = malloc(sizeof(Cursor) * turretTotalNumber);
        -:   81:    Cursor pos;
    #####:   82:    pos.x = 1;
    #####:   83:    pos.y = 1;
        -:   84:    Cursor previousPos;
    #####:   85:    previousPos.x = 0;
    #####:   86:    previousPos.y = 1;
        -:   87:    Cursor turretPos;
    #####:   88:    while (pos.x != gridSIZE - 1 && pos.y != gridSIZE - 1)
    %%%%%:   88-block  0
    %%%%%:   88-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   88-block  2
branch  2 never executed
branch  3 never executed
        -:   89:    {
    #####:   90:        for (int i = pos.x - 1; i <= pos.x + 1; i++)
    %%%%%:   90-block  0
    %%%%%:   90-block  1
    %%%%%:   90-block  2
branch  0 never executed
branch  1 never executed
        -:   91:        {
    #####:   92:            for (int j = pos.y - 1; j <= pos.y + 1; j++)
    %%%%%:   92-block  0
    %%%%%:   92-block  1
    %%%%%:   92-block  2
branch  0 never executed
branch  1 never executed
        -:   93:            {
    #####:   94:                if (grid[i][j] == grid[pos.x][pos.y] || grid[i][j] == grid[previousPos.x][previousPos.y]) // Check for current or previous position
    %%%%%:   94-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   94-block  1
branch  2 never executed
branch  3 never executed
        -:   95:                {
    #####:   96:                    continue;
    %%%%%:   96-block  0
        -:   97:                }
    #####:   98:                if (grid[i][j] == TURRET)
    %%%%%:   98-block  0
branch  0 never executed
branch  1 never executed
        -:   99:                { // Check for nearby turret position and put it in array
    #####:  100:                    turretPos.x = i;
    #####:  101:                    turretPos.y = j;
    #####:  102:                    turretOrder[turretIndex] = turretPos;
    %%%%%:  102-block  0
        -:  103:                }
    #####:  104:                if (i != pos.x && j != pos.y)
    %%%%%:  104-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  104-block  1
branch  2 never executed
branch  3 never executed
        -:  105:                {
    #####:  106:                    continue;
    %%%%%:  106-block  0
        -:  107:                }
    #####:  108:                if (grid[i][j] == PATH)
    %%%%%:  108-block  0
branch  0 never executed
branch  1 never executed
        -:  109:                {
    #####:  110:                    previousPos.x = pos.x;
    #####:  111:                    previousPos.y = pos.y;
    #####:  112:                    pos.x = i;
    #####:  113:                    pos.y = j;
    %%%%%:  113-block  0
        -:  114:                }
        -:  115:
    #####:  116:                if (turretIndex == turretTotalNumber - 1)
    %%%%%:  116-block  0
branch  0 never executed
branch  1 never executed
        -:  117:                {
    #####:  118:                    return turretOrder;
    %%%%%:  118-block  0
        -:  119:                }
        -:  120:            }
        -:  121:        }
        -:  122:    }
    #####:  123:}
    %%%%%:  123-block  0
        -:  124:
function displayGrid called 0 returned 0% blocks executed 0%
    #####:  125:void displayGrid(char grid[gridSIZE][gridSIZE])
        -:  126:{
    #####:  127:    puts("hi");
    %%%%%:  127-block  0
call    0 never executed
    #####:  128:    for (int i = 0; i < gridSIZE; i++)
    %%%%%:  128-block  0
branch  0 never executed
branch  1 never executed
        -:  129:    {
    #####:  130:        for (int j = 0; j < gridSIZE; j++)
    %%%%%:  130-block  0
    %%%%%:  130-block  1
branch  0 never executed
branch  1 never executed
        -:  131:        {
    #####:  132:            printf("%c", grid[j][i]);
    %%%%%:  132-block  0
call    0 never executed
        -:  133:        }
    #####:  134:        printf("\n");
    %%%%%:  134-block  0
call    0 never executed
        -:  135:    }
    #####:  136:    puts("bye");
    %%%%%:  136-block  0
call    0 never executed
    #####:  137:}
        -:  138:
        -:  139:
function updateGrid called 0 returned 0% blocks executed 0%
    #####:  140:void updateGrid(char grid[gridSIZE][gridSIZE])
        -:  141:{
    #####:  142:    for (int i = 0; i < gridSIZE; i++)
    %%%%%:  142-block  0
    %%%%%:  142-block  1
    %%%%%:  142-block  2
branch  0 never executed
branch  1 never executed
        -:  143:    {
    #####:  144:        for (int j = 0; j < gridSIZE; j++)
    %%%%%:  144-block  0
    %%%%%:  144-block  1
    %%%%%:  144-block  2
branch  0 never executed
branch  1 never executed
        -:  145:        {
    #####:  146:            if (grid[j][i] == '#')
    %%%%%:  146-block  0
branch  0 never executed
branch  1 never executed
    #####:  147:                grid[j][i] = NOTHING;
    %%%%%:  147-block  0
    #####:  148:            if (grid[j][i] == '@')
    %%%%%:  148-block  0
branch  0 never executed
branch  1 never executed
    #####:  149:                grid[j][i] = PATH;
    %%%%%:  149-block  0
    #####:  150:            if (grid[j][i] == '$')
    %%%%%:  150-block  0
branch  0 never executed
branch  1 never executed
    #####:  151:                grid[j][i] = TURRET;
    %%%%%:  151-block  0
        -:  152:        }
        -:  153:    }
    #####:  154:}
        -:  155:
function initWaves called 0 returned 0% blocks executed 0%
    #####:  156:void initWaves()
        -:  157:{
        -:  158:    FILE *file;
    #####:  159:    file = fopen("waves.txt", "r");
    %%%%%:  159-block  0
call    0 never executed
        -:  160:
    #####:  161:    if (file == NULL)
branch  0 never executed
branch  1 never executed
        -:  162:    {
    #####:  163:        return;
    %%%%%:  163-block  0
        -:  164:    }
        -:  165:
    #####:  166:    char txt[stringSIZE] = {0};
        -:  167:
    #####:  168:    int waveIndex = 0;
    #####:  169:    while (!feof(file))
    %%%%%:  169-block  0
    %%%%%:  169-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  170:    {
    #####:  171:        char lineBuffer[stringSIZE] = {0};
    #####:  172:        fgets(lineBuffer, stringSIZE, file);
    %%%%%:  172-block  0
call    0 never executed
    #####:  173:        strcat(txt, lineBuffer);
    #####:  174:        if (ferror(file))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  175:        {
    #####:  176:            fprintf(stderr, "Reading error\n");
    %%%%%:  176-block  0
call    0 never executed
    #####:  177:            break;
        -:  178:        }
        -:  179:        //printf(lineBuffer);
        -:  180:
    #####:  181:        bool goldParsed = false;
    #####:  182:        char goldStr[8] = {0};
    #####:  183:        int i = 0;
    #####:  184:        char tmpEnemies[256] = {0};
    #####:  185:        int enemyIndex = 0;
    #####:  186:        while (*(lineBuffer + i) != 0)
    %%%%%:  186-block  0
    %%%%%:  186-block  1
branch  0 never executed
branch  1 never executed
        -:  187:        {
    #####:  188:            if (lineBuffer[i] == ',')
    %%%%%:  188-block  0
branch  0 never executed
branch  1 never executed
        -:  189:            {
    #####:  190:                if (!goldParsed)
    %%%%%:  190-block  0
branch  0 never executed
branch  1 never executed
        -:  191:                {
    #####:  192:                    goldParsed = true;
    %%%%%:  192-block  0
        -:  193:                }
    #####:  194:                i++;
    #####:  195:                continue;
    %%%%%:  195-block  0
        -:  196:            }
    #####:  197:            if (!goldParsed)
    %%%%%:  197-block  0
branch  0 never executed
branch  1 never executed
        -:  198:            {
    #####:  199:                goldStr[i] = lineBuffer[i];
    %%%%%:  199-block  0
        -:  200:            }
    #####:  201:            else if (lineBuffer[i] != '\n' && lineBuffer[i] != '\r')
    %%%%%:  201-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  201-block  1
branch  2 never executed
branch  3 never executed
        -:  202:            {
    #####:  203:                tmpEnemies[enemyIndex] = lineBuffer[i];
    #####:  204:                enemyIndex++;
    %%%%%:  204-block  0
        -:  205:            }
    #####:  206:            i++;
    %%%%%:  206-block  0
        -:  207:        }
    #####:  208:        int goldValue = atoi(goldStr);
        -:  209:        //Wave w = {waveIndex, goldValue, tmpEnemies};
        -:  210:        //printf("%s", tmpEnemies);
    #####:  211:        Waves[waveIndex].index = waveIndex;
    #####:  212:        Waves[waveIndex].gold = goldValue;
    #####:  213:        strcpy(Waves[waveIndex].enemies, tmpEnemies);
    #####:  214:        waveIndex++;
    %%%%%:  214-block  0
        -:  215:        //printf("g %d\n", goldValue);
        -:  216:    }
        -:  217:    //printf(txt);
        -:  218:}
        -:  219:
function displayWaves called 0 returned 0% blocks executed 0%
    #####:  220:void displayWaves()
        -:  221:{
    #####:  222:    for (size_t i = 0; i < WaveAmount; i++)
    %%%%%:  222-block  0
    %%%%%:  222-block  1
branch  0 never executed
branch  1 never executed
        -:  223:    {
    #####:  224:        const Wave w = Waves[i];
    #####:  225:        if (w.gold == 0)
    %%%%%:  225-block  0
branch  0 never executed
branch  1 never executed
    #####:  226:            break;
    %%%%%:  226-block  0
    #####:  227:        printf("Wave %d | Gold = %d | Enemies = %s\n", w.index, w.gold, w.enemies);
    %%%%%:  227-block  0
call    0 never executed
        -:  228:    }
    #####:  229:}
        -:  230:
function main called 1 returned 100% blocks executed 15%
        1:  231:int main()
        -:  232:{
        1:  233:    puts("Starting solver");
        1:  233-block  0
call    0 returned 1
        -:  234:    FILE *file;
        1:  235:    file = fopen("grid.txt", "r");
call    0 returned 1
        -:  236:
        1:  237:    if (file == NULL)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  238:    {
        1:  239:        return -1;
        1:  239-block  0
        -:  240:    }
    #####:  241:    char txt[stringSIZE] = {0};
        -:  242:
    #####:  243:    while (!feof(file))
    %%%%%:  243-block  0
    %%%%%:  243-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  244:    {
    #####:  245:        char lineBuffer[stringSIZE] = {0};
    #####:  246:        fgets(lineBuffer, stringSIZE, file);
    %%%%%:  246-block  0
call    0 never executed
    #####:  247:        strcat(txt, lineBuffer);
    #####:  248:        if (ferror(file))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  249:        {
    #####:  250:            fprintf(stderr, "Reading error\n");
    %%%%%:  250-block  0
call    0 never executed
    #####:  251:            break;
        -:  252:        }
        -:  253:    }
        -:  254:
    #####:  255:    printf("\n\n%s\n", txt);
    %%%%%:  255-block  0
call    0 never executed
        -:  256:
    #####:  257:    int h = 0;
        -:  258:    char grid[gridSIZE][gridSIZE];
        -:  259:
    #####:  260:    int i, j = 0;
        -:  261:
    #####:  262:    while (txt[h] != '\0')
    %%%%%:  262-block  0
branch  0 never executed
branch  1 never executed
        -:  263:    {
        -:  264:
    #####:  265:        if (txt[h] == '\n')
    %%%%%:  265-block  0
branch  0 never executed
branch  1 never executed
        -:  266:        {
    #####:  267:            j++;
    #####:  268:            i = 0;
    %%%%%:  268-block  0
        -:  269:        }
        -:  270:        else
        -:  271:        {
    #####:  272:            grid[i][j] = txt[h];
    #####:  273:            i++;
    %%%%%:  273-block  0
        -:  274:        }
    #####:  275:        h++;
    %%%%%:  275-block  0
        -:  276:    }
        -:  277:
    #####:  278:    updateGrid(grid);
    %%%%%:  278-block  0
call    0 never executed
    #####:  279:    printf("\n");
call    0 never executed
        -:  280:
    #####:  281:    displayGrid(grid);
call    0 never executed
        -:  282:
    #####:  283:    fclose(file);
call    0 never executed
    #####:  284:    printf("\n");
call    0 never executed
    #####:  285:    int gold = 70;
    #####:  286:    Cursor *cursors = getOptimalTurretPositions(grid, gold);
call    0 never executed
    #####:  287:    displayGrid(grid);
call    0 never executed
    #####:  288:    displayPositions(cursors, gold / 10);
call    0 never executed
        -:  289:
    #####:  290:    initWaves();
call    0 never executed
    #####:  291:    displayWaves();
call    0 never executed
        -:  292:    //printf(" x = %d | y = %d \n", pos.x, pos.y);
        -:  293:
    #####:  294:    simulate(grid, Waves[0]);
call    0 never executed
        -:  295:}
